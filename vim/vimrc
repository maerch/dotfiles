syntax on
filetype off
set noswapfile
set nocompatible 

source ~/.vim/plugins.vim
source ~/.vim/unite.vim

" JSX (React) config
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
 vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" check file change every 4 seconds ('CursorHold') and reload the buffer upon detecting change
set autoread
au CursorHold * checktime

colorscheme jellybeans
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
      \   'filename': '%{expand("%:h")}/%t'
      \ }
      \ }

let g:badwolf_darkgutter = 1
let g:badwolf_tabline = 0

" Always show the git gutter
let g:gitgutter_sign_column_always = 1

" Show git gutter signs after typing
let g:gitgutter_realtime = 1

" Show line numbers
set number

" Always show the status bar
set laststatus=2

" Prevent encoding vietnam
set encoding=utf-8

" Wraps and indicates if a line was wrapped
set wrap
set showbreak=↪

" General indentation settings
set ts=2 sts=2 sw=2 expandtab

" Do a smart break of line (do not start at the beginning of the line but on
" the same indentation level)
set breakindent

" Working backspace
set backspace=2

" Turn on indentation based on the file type
filetype plugin indent on

" Intendation without losing visual selection
vmap > >gv
vmap < <gv

" Let the buffer change without saving the current buffer
set hidden

" No beep anymore
set visualbell

" Enable mouse support for all modes
set mouse=a

" j/k working on wrapped lines
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Easy buffer navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Minimum number of lines above and below the cursor
set scrolloff=10

" Do not jump to the start of line while switching the buffers
set nostartofline

" Highlight current line
set cursorline
hi CursorLine term=bold cterm=bold guibg=Grey20

" Cursor is in the center after search
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" Search for visual selected text with //
vnoremap // y/<C-R>"<CR>

" Don't move on *
nnoremap * *<c-o>

" Changing color of matching brackets
hi! link MatchParen Search

" Highlight search
set hlsearch

" Incremental Search please
set incsearch

" Leader needs space
let mapleader = "\<Space>"

" Clear search with <leader><space>
nnoremap <leader><space> :noh<cr>

" Save all with the leader + w
nnoremap <Leader>w :wall<CR>

" Quit vim
nnoremap <Leader>q :q<CR>

" copy visual selection to os clipboard
vmap <Leader>y "+y

" Reload the vimrc
nnoremap <Leader>r :source $MYVIMRC<CR>

" Toggle paste mode
set pastetoggle=<F10>

" Esc 
imap jk <Esc>

" Substitution is always global
set gdefault

" Rspec stuff
let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" DelimitMate config
let b:delimitMate_expand_cr=1
let b:delimitMate_expand_space=1

" Correct syntax-highlight for scss files (OSX)
au BufRead,BufNewFile *.scss set filetype=scss

" Ignore a lot of stuff
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/_site/*,*/bower_components/*,*/node_modules/*

" Cursor shape in insert/normal mode
" For tmux running in iTerm2 on OS X
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
"let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Highlight current column as well
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Trailing whitespace
set list
set listchars=trail:•

" aka 'Oh, that's the key I have been hitting by accident'
nnoremap Q <nop>
